print(paste(norm, ' threshold ', fdrThresh, " - Number of GO terms: ", totGO, sep = ""))
flush.console()
# print("Performing KEGG analysis")
# flush.console()
# KEGGresult <- enrichKEGG(gene = DE_prots,
#                          organism = "hsa",
#                          keyType = 'uniprot',
#                          universe = BG_prots,
#                          pvalueCutoff = 0.05,
#                          pAdjustMethod = 'BH')
# KEGGnum <- nrow(KEGGresult)
# print(paste("Number of KEGG terms: ", KEGGnum , sep = ""))
# flush.console()
#
# totNum <- totGO + KEGGnum
#   ## Summary of results
#   results <- data.frame(Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
#                         Go_CC = GOCCnum,  Kegg_Path = KEGGnum , Total = totNum, DEs = DE)
#
#   ## Add to table of results
#   thresholdResults <- rbind(thresholdResults, results)
#
# } else {
#   results <- data.frame(Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
#                         Go_CC = 0, Kegg_Path = 0, Total = 0, DEs = DE)
#   thresholdResults <- rbind(thresholdResults, results)
## Summary of results
results <- data.frame(DE = DE, Normalisation = norm, Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
Go_CC = GOCCnum, Total = totGO, DEs = DE)
## Add to table of results
thresholdResults <- rbind(thresholdResults, results)
} else {
print(paste("No DE proteins at threshold: ", fdrThresh, sep = ""))
flush.console()
results <- data.frame(DE = DE, Normalisation = norm, Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
Go_CC = 0, Total = 0, DEs = DE)
thresholdResults <- rbind(thresholdResults, results)
}
}
for (fdrThresh in thresholds) {
## Seperate the protein name so the Unipropt accesion can be used
#protAcc <- Tresults %>% separate(Proteins, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
protAcc <- Tresults %>% separate(Accession, "Uniprot_Acc", sep = ";")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
#BG_react <- select(organism, BG_prots, "ENTREZID", "UNIPROT")
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
#DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
#DE_prots <- c("P00450", "P01871", "P01876", "P02790", "P04004", "P05164",
#              "P08246", "P08311", "P09104", "P0DOX7", "P20061", "P20160",
#              "P24158", "P29401", "Q16695", "Q9BQE3", "Q9UKL4")
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) >= fdrThresh))
nonDE <- length(NonDE_prots)
if (DE > 0) {
print(paste(norm, ' threshold ', fdrThresh, " - Number of DEs: ", DE, sep = ""))
flush.console()
#print("Performing GO analysis....")
flush.console()
# Get functional annotation chart as R object and save to file
GO_BPresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'BP',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_BPresult)) {
GO_BPsimply <- simplify(GO_BPresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOBPnum <- nrow(GO_BPsimply)
} else {
GOBPnum <- 0
}
GO_MFresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'MF',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_MFresult)) {
GO_MFsimply <- simplify(GO_MFresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOMFnum <- nrow(GO_MFsimply)
} else {
GOMFnum <- 0
}
GO_CCresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'CC',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_CCresult)) {
GO_CCsimply <- simplify(GO_CCresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOCCnum <- nrow(GO_CCsimply)
}else {
GOCCnum <- 0
}
totGO <- GOBPnum + GOMFnum + GOCCnum
print(paste(norm, ' threshold ', fdrThresh, " - Number of GO terms: ", totGO, sep = ""))
flush.console()
# print("Performing KEGG analysis")
# flush.console()
# KEGGresult <- enrichKEGG(gene = DE_prots,
#                          organism = "hsa",
#                          keyType = 'uniprot',
#                          universe = BG_prots,
#                          pvalueCutoff = 0.05,
#                          pAdjustMethod = 'BH')
# KEGGnum <- nrow(KEGGresult)
# print(paste("Number of KEGG terms: ", KEGGnum , sep = ""))
# flush.console()
#
# totNum <- totGO + KEGGnum
#   ## Summary of results
#   results <- data.frame(Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
#                         Go_CC = GOCCnum,  Kegg_Path = KEGGnum , Total = totNum, DEs = DE)
#
#   ## Add to table of results
#   thresholdResults <- rbind(thresholdResults, results)
#
# } else {
#   results <- data.frame(Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
#                         Go_CC = 0, Kegg_Path = 0, Total = 0, DEs = DE)
#   thresholdResults <- rbind(thresholdResults, results)
## Summary of results
results <- data.frame(DE = DE, Normalisation = norm, Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
Go_CC = GOCCnum, Total = totGO, DEs = DE)
## Add to table of results
thresholdResults <- rbind(thresholdResults, results)
} else {
print(paste("No DE proteins at threshold: ", fdrThresh, sep = ""))
flush.console()
results <- data.frame(DE = DE, Normalisation = norm, Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
Go_CC = 0, Total = 0, DEs = DE)
thresholdResults <- rbind(thresholdResults, results)
}
}
fileIn <-  "CaseStudy_MedI-G-normalized_Log2_Tresults.csv"
fileOut <- paste ("PAout_", fileIn, sep = '')
Tresults <- read.csv(fileIn, header =TRUE)
Tresults <- as.data.frame(Tresults)
# heads <- Tresults[1,]
# Tresults <- Tresults[-1,]
# colnames(Tresults) <- heads
#thresholds <- c(0.000001, 0.000002, 0.000003, 0.000004, 0.000005, 0.000006, 0.000007, 0.000008, 0.000009,
#                0.00001, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007, 0.00008, 0.00009,
#                0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009,
#                0.001,  0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009,
#                0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1)
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
thresholds <-c(0.04)
for (fdrThresh in thresholds) {
## Seperate the protein name so the Unipropt accesion can be used
#protAcc <- Tresults %>% separate(Proteins, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
protAcc <- Tresults %>% separate(Accession, "Uniprot_Acc", sep = ";")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
#BG_react <- select(organism, BG_prots, "ENTREZID", "UNIPROT")
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
#DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
#DE_prots <- c("P00450", "P01871", "P01876", "P02790", "P04004", "P05164",
#              "P08246", "P08311", "P09104", "P0DOX7", "P20061", "P20160",
#              "P24158", "P29401", "Q16695", "Q9BQE3", "Q9UKL4")
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) >= fdrThresh))
nonDE <- length(NonDE_prots)
if (DE > 0) {
print(paste(norm, ' threshold ', fdrThresh, " - Number of DEs: ", DE, sep = ""))
flush.console()
#print("Performing GO analysis....")
flush.console()
# Get functional annotation chart as R object and save to file
GO_BPresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'BP',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_BPresult)) {
GO_BPsimply <- simplify(GO_BPresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOBPnum <- nrow(GO_BPsimply)
} else {
GOBPnum <- 0
}
GO_MFresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'MF',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_MFresult)) {
GO_MFsimply <- simplify(GO_MFresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOMFnum <- nrow(GO_MFsimply)
} else {
GOMFnum <- 0
}
GO_CCresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'CC',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_CCresult)) {
GO_CCsimply <- simplify(GO_CCresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOCCnum <- nrow(GO_CCsimply)
}else {
GOCCnum <- 0
}
totGO <- GOBPnum + GOMFnum + GOCCnum
print(paste(norm, ' threshold ', fdrThresh, " - Number of GO terms: ", totGO, sep = ""))
flush.console()
# print("Performing KEGG analysis")
# flush.console()
# KEGGresult <- enrichKEGG(gene = DE_prots,
#                          organism = "hsa",
#                          keyType = 'uniprot',
#                          universe = BG_prots,
#                          pvalueCutoff = 0.05,
#                          pAdjustMethod = 'BH')
# KEGGnum <- nrow(KEGGresult)
# print(paste("Number of KEGG terms: ", KEGGnum , sep = ""))
# flush.console()
#
# totNum <- totGO + KEGGnum
#   ## Summary of results
#   results <- data.frame(Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
#                         Go_CC = GOCCnum,  Kegg_Path = KEGGnum , Total = totNum, DEs = DE)
#
#   ## Add to table of results
#   thresholdResults <- rbind(thresholdResults, results)
#
# } else {
#   results <- data.frame(Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
#                         Go_CC = 0, Kegg_Path = 0, Total = 0, DEs = DE)
#   thresholdResults <- rbind(thresholdResults, results)
## Summary of results
results <- data.frame(DE = DE, Normalisation = norm, Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
Go_CC = GOCCnum, Total = totGO, DEs = DE)
## Add to table of results
thresholdResults <- rbind(thresholdResults, results)
} else {
print(paste("No DE proteins at threshold: ", fdrThresh, sep = ""))
flush.console()
results <- data.frame(DE = DE, Normalisation = norm, Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
Go_CC = 0, Total = 0, DEs = DE)
thresholdResults <- rbind(thresholdResults, results)
}
}
write.csv(GO_BPsimply, "BestBP_GO.csv")
write.csv(GO_CCsimply, "BestCC_GO.csv")
write.csv(GO_MFsimply, "BestMF_GO.csv")
fileIn <-  "CaseStudy_MedI-G-normalized_Log2_Tresults.csv"
fileOut <- paste ("PAout_", fileIn, sep = '')
Tresults <- read.csv(fileIn, header =TRUE)
Tresults <- as.data.frame(Tresults)
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
thresholds <-c(0.04)
## Seperate the protein name so the Unipropt accesion can be used
#protAcc <- Tresults %>% separate(Proteins, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
protAcc <- Tresults %>% separate(Accession, "Uniprot_Acc", sep = ";")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
## Initialises vector of results
results <- NULL
DE <- length(DE_prots)
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) >= fdrThresh))
nonDE <- length(NonDE_prots)
if (DE > 0) {
print(paste(norm, ' threshold ', fdrThresh, " - Number of DEs: ", DE, sep = ""))
flush.console()
#print("Performing GO analysis....")
flush.console()
# Get functional annotation chart as R object and save to file
GO_BPresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'BP',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_BPresult)) {
GO_BPsimply <- simplify(GO_BPresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOBPnum <- nrow(GO_BPsimply)
} else {
GOBPnum <- 0
}
GO_MFresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'MF',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_MFresult)) {
GO_MFsimply <- simplify(GO_MFresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOMFnum <- nrow(GO_MFsimply)
} else {
GOMFnum <- 0
}
GO_CCresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'CC',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_CCresult)) {
GO_CCsimply <- simplify(GO_CCresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOCCnum <- nrow(GO_CCsimply)
}else {
GOCCnum <- 0
}
totGO <- GOBPnum + GOMFnum + GOCCnum
print(paste(norm, ' threshold ', fdrThresh, " - Number of GO terms: ", totGO, sep = ""))
flush.console()
# print("Performing KEGG analysis")
# flush.console()
# KEGGresult <- enrichKEGG(gene = DE_prots,
#                          organism = "hsa",
#                          keyType = 'uniprot',
#                          universe = BG_prots,
#                          pvalueCutoff = 0.05,
#                          pAdjustMethod = 'BH')
# KEGGnum <- nrow(KEGGresult)
# print(paste("Number of KEGG terms: ", KEGGnum , sep = ""))
# flush.console()
#
# totNum <- totGO + KEGGnum
#   ## Summary of results
#   results <- data.frame(Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
#                         Go_CC = GOCCnum,  Kegg_Path = KEGGnum , Total = totNum, DEs = DE)
#
#   ## Add to table of results
#   thresholdResults <- rbind(thresholdResults, results)
#
# } else {
#   results <- data.frame(Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
#                         Go_CC = 0, Kegg_Path = 0, Total = 0, DEs = DE)
#   thresholdResults <- rbind(thresholdResults, results)
## Summary of results
results <- data.frame(DE = DE, Normalisation = norm, Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
Go_CC = GOCCnum, Total = totGO, DEs = DE)
## Add to table of results
thresholdResults <- rbind(thresholdResults, results)
} else {
print(paste("No DE proteins at threshold: ", fdrThresh, sep = ""))
flush.console()
results <- data.frame(DE = DE, Normalisation = norm, Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
Go_CC = 0, Total = 0, DEs = DE)
thresholdResults <- rbind(thresholdResults, results)
}
for (fdrThresh in thresholds) {
## Seperate the protein name so the Unipropt accesion can be used
#protAcc <- Tresults %>% separate(Proteins, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
protAcc <- Tresults %>% separate(Accession, "Uniprot_Acc", sep = ";")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
#BG_react <- select(organism, BG_prots, "ENTREZID", "UNIPROT")
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
#DE_prots <- c("P00450", "P01871", "P01876", "P02790", "P04004", "P05164",
#              "P08246", "P08311", "P09104", "P0DOX7", "P20061", "P20160",
#              "P24158", "P29401", "Q16695", "Q9BQE3", "Q9UKL4")
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) >= fdrThresh))
nonDE <- length(NonDE_prots)
if (DE > 0) {
print(paste(norm, ' threshold ', fdrThresh, " - Number of DEs: ", DE, sep = ""))
flush.console()
#print("Performing GO analysis....")
flush.console()
# Get functional annotation chart as R object and save to file
GO_BPresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'BP',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_BPresult)) {
GO_BPsimply <- simplify(GO_BPresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOBPnum <- nrow(GO_BPsimply)
} else {
GOBPnum <- 0
}
GO_MFresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'MF',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_MFresult)) {
GO_MFsimply <- simplify(GO_MFresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOMFnum <- nrow(GO_MFsimply)
} else {
GOMFnum <- 0
}
GO_CCresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'CC',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_CCresult)) {
GO_CCsimply <- simplify(GO_CCresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOCCnum <- nrow(GO_CCsimply)
}else {
GOCCnum <- 0
}
totGO <- GOBPnum + GOMFnum + GOCCnum
print(paste(norm, ' threshold ', fdrThresh, " - Number of GO terms: ", totGO, sep = ""))
flush.console()
# print("Performing KEGG analysis")
# flush.console()
# KEGGresult <- enrichKEGG(gene = DE_prots,
#                          organism = "hsa",
#                          keyType = 'uniprot',
#                          universe = BG_prots,
#                          pvalueCutoff = 0.05,
#                          pAdjustMethod = 'BH')
# KEGGnum <- nrow(KEGGresult)
# print(paste("Number of KEGG terms: ", KEGGnum , sep = ""))
# flush.console()
#
# totNum <- totGO + KEGGnum
#   ## Summary of results
#   results <- data.frame(Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
#                         Go_CC = GOCCnum,  Kegg_Path = KEGGnum , Total = totNum, DEs = DE)
#
#   ## Add to table of results
#   thresholdResults <- rbind(thresholdResults, results)
#
# } else {
#   results <- data.frame(Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
#                         Go_CC = 0, Kegg_Path = 0, Total = 0, DEs = DE)
#   thresholdResults <- rbind(thresholdResults, results)
## Summary of results
results <- data.frame(DE = DE, Normalisation = norm, Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
Go_CC = GOCCnum, Total = totGO, DEs = DE)
## Add to table of results
thresholdResults <- rbind(thresholdResults, results)
} else {
print(paste("No DE proteins at threshold: ", fdrThresh, sep = ""))
flush.console()
results <- data.frame(DE = DE, Normalisation = norm, Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
Go_CC = 0, Total = 0, DEs = DE)
thresholdResults <- rbind(thresholdResults, results)
}
}
write.csv(GO_BPsimply, "BestBP_GO.csv")
write.csv(GO_CCsimply, "BestCC_GO.csv")
write.csv(GO_MFsimply, "BestMF_GO.csv")
