for (i in 1:ntick) {
f0_temp[i]<- f0[i]
}
f_ord <- sort(f)
tol_diff <- f_ord[np] * 0.01
ct <- 0
ntry <- 10000
rescale_factor <- 1
is_under <- 1
is_over <- 0
while(rescale_factor > 0 && ct < ntry) {
#if(ct > 0 && ct %% 1000 == 0) {
#    print('error')
#}
for(i in 1:ntick) {
tmp <- 0.0
tmp <- tmp + (pi_0 * gaussian_pdf(tickMarks[i], nullmean, (nullvar * rescale_factor)))
tmp <- tmp / (1.0 - pi_1)
f0[i] <-  tmp # equalizing the height as it was obtained before rescaling
}
# f0_factor is updated as we shrink the variances
i <- 1
while(tickMarks[i] < nullmean) {
i <- i + 1
}
f0_factor = f[i] / f0[i]
for (i in 1:ntick) {
f0[i] <- f0[i] * f0_factor
}
# check if f0_temp falls under the non-parametric estimate of f
is_under <- 1
for (i in 1:ntick) {
if(tickMarks[i] > z_left && tickMarks[i] < z_right) {
if(f0[i] > (f[i]+tol_diff)) {
is_under <- 0
}
}
}
if(is_under==1) {
nullvar <- nullvar * rescale_factor
print(paste('Found re-scaling factor: ', rescale_factor, sep = ''))
break
}
rescale_factor <- rescale_factor * 0.99
ct <- ct + 1
}
if(ct == ntry) {
print(paste('Unable to rescale variances. Last try: ', rescale_factor, sep = ''))
}
#If it satisfied in the first try, that means we can inflate the variances
if(ct == 0) {
print("Inflating variances")
ct <- 0
rescale_factor <- 1
while(rescale_factor > 0 && ct < ntry) {
#if(ct > 0 && ct %% 1000 == 0) {
#    print('error')
#}
for(i in 1:ntick) {
tmp <- 0.0
tmp <- tmp + (pi_0 * gaussian_pdf(tickMarks[i], nullmean, (nullvar * rescale_factor)))
tmp <- tmp / (1.0 - pi_1)
f0[i] <-  tmp # equalizing the height as it was obtained before rescaling
}
# f0_factor is updated as we shrink the variances
i <- 1
while(tickMarks[i] < nullmean) {
i <- i + 1
}
f0_factor = f[i] / f0[i]
for (i in 1:ntick) {
f0[i] <- f0[i] * f0_factor
}
# check if f0_temp falls under the non-parametric estimate of f
is_over <- 0
for (i in 1:ntick) {
if(tickMarks[i] > z_left && tickMarks[i] < z_right) {
if(f0[i] > (f[i]+tol_diff)) {
is_over <- 1
}
}
}
if(is_over==1) {
nullvar <- nullvar * rescale_factor
print(paste('Found re-scaling factor: ', rescale_factor, sep = ''))
break
}
rescale_factor <- rescale_factor * 1.05
ct <- ct + 1
}
}
for(i in 1:ntick) {
if(f[i] < f0[i]) {
f[i] = f0[i]
}
}
# re-evaluate f0
for(i in 1:ntick) {
tmp = 0.0
tmp <- tmp + (pi_0 * gaussian_pdf(tickMarks[i], nullmean, nullvar))
tmp <- tmp / (1.0 - pi_1)
f0[i] = tmp
}
#identifying the range to fit null component to the overall density
tmp_r <- NULL
mm <- 0
vv <- 0
mm <- mm + nullmean
vv <- vv + nullvar
tmp <- 1
for(i in 1:ntick) {
if(abs(tickMarks[i] - mm) < 3.0 * sqrt(vv)) {
tmp_r = f[i] / f0[i]
if(tmp_r < tmp) {
tmp <- tmp_r
}
}
}
pi_true = 1 - tmp
print(paste('The estimate of pi(DE) is: ', pi_true, sep = ''))
# Evaluate densities
for(j in 1:np) {
## Evaluate f0
df0[j] <- pi_0 * gaussian_pdf(zstat[j], nullmean, nullvar)
df0[j] <- df0[j] / (1.0 - pi_1)
## Evaluate df
i = 1
while(tickMarks[i] < zstat[j]  && i <= ntick) {
i <- i + 1
}
df[j] = f[i] + (f[i+1] - f[i]) / (tickMarks[i+1] - tickMarks[i]) * (zstat[j] - tickMarks[i])
}
## Evaluate f1
for(i in 1:ntick) {
f1[i] <- ( f[i] - (1.0-pi_true) * f0[i] ) / pi_true
if(f1[i] < 1e-100) {
f1[i] <- 1e-100
}
}
#computeFDR
QM_fdr <- NULL
QM_FDRup <- NULL
QM_FDRdown <- NULL
for(j in 1:np) {
QM_fdr[j] <- (1.0 - pi_true) * df0[j] / df[j]
if(QM_fdr[j] > 1) {
QM_fdr[j] <- 1
} else {
QM_fdr[j] <- QM_fdr[j]
}
}
example_qprot_fdr$QM_fdr <- QM_fdr
for(j in 1:np) {
i <- ntick
tmpsum <- 0.0
tmpsum0 <- 0.0
while(tickMarks[i-1] < zstat[j]) {
tmpsum <- tmpsum + (0.5 * (f[i] + f[i-1]) * (tickMarks[i] - tickMarks[i-1]))
tmpsum0 <- tmpsum0 + (0.5 * (f0[i] + f0[i-1]) * (tickMarks[i] - tickMarks[i-1]))
i <- i - 1
}
tmpsum <- tmpsum + (0.5 * (f[i] + df[j]) * (tickMarks[i] - zstat[j]))
tmpsum0 <- tmpsum0 + (0.5 * (f0[i] + df0[j]) * (tickMarks[i] - zstat[j]))
QM_FDRup[j] = (1.0 - pi_true) * tmpsum0 / tmpsum
if(QM_FDRup[j] > 1) {
QM_FDRup[j] <- 1
} else {
QM_FDRup[j] <- QM_FDRup[j]
}
}
example_qprot_fdr$QM_FDRup <- QM_FDRup
for(j in 1:np) {
i <- 1
tmpsum <- 0.0
tmpsum0 <- 0.0
while(tickMarks[i+1] < zstat[j]) {
tmpsum <- tmpsum + (0.5 * (f[i+1] + f[i]) * (tickMarks[i+1] - tickMarks[i]))
tmpsum0 <- tmpsum0 + (0.5 * (f0[i+1] + f0[i]) * (tickMarks[i+1] - tickMarks[i]))
i <- i + 1
}
tmpsum <- tmpsum + (0.5 * (df[j] + f[i]) * (zstat[j]  - tickMarks[i]))
tmpsum0 <- tmpsum0 + (0.5 * (df0[j] + f0[i]) * (zstat[j]  - tickMarks[i]))
QM_FDRdown[j] = (1.0 - pi_true) * tmpsum0 / tmpsum
if(QM_FDRdown[j] > 1) {
QM_FDRdown[j] <- 1
} else {
QM_FDRdown[j] <- QM_FDRdown[j]
}
}
example_qprot_fdr$QM_FDRdown <- QM_FDRdown
setwd('/mnt/hc-storage/users/hprice/Pipeline/PathwayAnalysis')
write.csv(example_qprot_fdr, outFile, row.names = FALSE)
outfile <- 'fdrtest.csv'
write.csv(example_qprot_fdr, outFile, row.names = FALSE)
outFile <- 'fdrtest.csv'
write.csv(example_qprot_fdr, outFile, row.names = FALSE)
fileIn <- 'fdrtest.csv'
# Reads in file and removes top 2 lines
qprot_out <- read.csv(fileIn, header = FALSE)
cols <- qprot_out[1,]
qprot_out <- qprot_out[-1,]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(qprot_out) <- cols
qprot_out <- qprot_out[order(qprot_out$QM_fdr), ]
## Seperate the protein name so the Unipropt accesion can be used
protAcc <- qprot_out %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
View(protAcc)
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
BG_react <- select(org.Hs.eg.db, BG_prots, "ENTREZID", "UNIPROT")
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, protAcc$QM_fdr < fdrThresh))
DE <- length(DE_prots)
protAcc$QM_fdr
qprot_out <- qprot_out[order(as.numeric(qprot_out$QM_fdr)), ]
qprot_out$QM_fdr
class(qprot_out)
class(qprot_out$QM_fdr)
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$QM_fdr) < fdrThresh))
DE <- length(DE_prots)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PathwayAnalysis')
fileIn <- 'PXD004682_AI-G-normalized_Log2_Tresults.csv'
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = FALSE)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PathwayAnalysis/T')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = FALSE)
cols <- Tresults[1,]
Tresults <- Tresults[-1,]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
## calculate adj p values
Tresults <- Tresults[order(-(as.numeric(Tresults$pVal))), ]
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = FALSE)
cols <- Tresults[1,]
Tresults <- Tresults[-1,]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
View(Tresults)
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = FALSE)
cols <- Tresults[1,]
View(cols)
cols <- Tresults[2,]
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = FALSE)
Tresults <- Tresults[,-1]
cols <- Tresults[2,]
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = FALSE)
Tresults <- Tresults[,-1]
cols <- Tresults[2,]
View(cols)
cols <- cols[1,-1]
cols <- Tresults[2,]
cols <- cols[1,-1]
cols <- cbind('Protein', cols)
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
## calculate adj p values
Tresults <- Tresults[order(-(as.numeric(Tresults$pVal))), ]
## calculate adj p values
Tresults <- Tresults[order(as.numeric(Tresults$pVal)), ]
Tresults$BHpVal <- p.adjust(Tresults$pVal, method = "BH", n = length(Tresults$pVal))
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
fdrThresh <- 0.05
## Seperate the protein name so the Unipropt accesion can be used
protAcc <- Tresults %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
BG_react <- select(org.Hs.eg.db, BG_prots, "ENTREZID", "UNIPROT")
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
DE <- length(DE_prots)
protAcc$BHpVal
Tresults <- read.csv(fileIn, header = FALSE)
Tresults <- Tresults[,-1]
cols <- Tresults[2,]
cols <- cols[1,-1]
cols <- cbind('Protein', cols)
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
## calculate adj p values
Tresults <- Tresults[order(-(as.numeric(Tresults$pVal))), ]
Tresults$BHpVal <- p.adjust(Tresults$pVal, method = "BH", n = length(Tresults$pVal))
thresholds <- c(0.000001, 0.000002, 0.000003, 0.000004, 0.000005, 0.000006, 0.000007, 0.000008, 0.000009,
0.00001, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007, 0.00008, 0.00009,
0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009,
0.001,  0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009,
0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1)
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
## calculate adj p values
Tresults <- Tresults[order(-(as.numeric(Tresults$pVal))), ]
Tresults$BHpVal <- p.adjust(as.numeric(Tresults$pVal), method = "BH", n = length(Tresults$pVal))
## calculate adj p values
Tresults <- Tresults[order(as.numeric(Tresults$pVal)), ]
Tresults$BHpVal <- p.adjust(as.numeric(Tresults$pVal), method = "BH", n = length(Tresults$pVal))
length(Tresults$pVal)
Tresults$pVal
as.numeric(Tresults$pVal)
## calculate adj p values
Tresults$pval <- as.numeric(Tresults$pval)
# Reads in file and removes top 2 lines
Tresults <- as.data.frame(read.csv(fileIn, header = FALSE))
Tresults <- Tresults[,-1]
cols <- Tresults[2,]
cols <- cols[1,-1]
cols <- cbind('Protein', cols)
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
## calculate adj p values
Tresults <- Tresults[order(Tresults$pVal), ]
Tresults$pVal
Tresults$BHpVal <- p.adjust(as.numeric(Tresults$pVal), method = "BH", n = length(Tresults$pVal))
# Reads in file and removes top 2 lines
Tresults <- as.data.frame(read.csv(fileIn, header = FALSE))
class(Tresults$pval)
Tresults <- Tresults[,-1]
cols <- Tresults[2,]
cols <- cols[1,-1]
cols <- cbind('Protein', cols)
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
Tresults <- as.data.frame(Tresults)
class(Tresults$pval)
class(Tresults$pVal)
