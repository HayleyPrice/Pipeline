scale_y_continuous(name = "") +
theme(
axis.title.x = element_text(size = 13, face = 'bold'),
axis.text.x = element_text(size = 11, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text.y = element_text(size = 11, face = 'bold'),
legend.position = legend.position
)
# Return jittered or non-jittered plot?
if (jitter) {
P + geom_jitter(width = 0.1, size = 2)
}
else {
P + geom_point()
}
}
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("grey", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
library(tidyverse)
library(patchwork)
library(broom)
# Reproducible "random" results
set.seed(40)
# Generate normal data with known parameters
rnorm_fixed = function(N, mu = 0, sd = 1)
scale(rnorm(N)) * sd + mu
# Plot style.
theme_axis = function(P,
jitter = FALSE,
xlim = c(0, 2.5),
ylim = c(0, 2.5),
legend.position = NULL) {
P = P + theme_bw() +
#geom_segment(
#    x = -1000, xend = 1000,
#    y = 0, yend = 0,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#geom_segment(
#    x = 0, xend = 0,
#    y = -1000, yend = 1000,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#coord_cartesian(xlim = xlim, ylim = ylim) +
scale_x_continuous(name = "Groups", breaks = c()) +
scale_y_continuous(name = "") +
theme(
axis.title.x = element_text(size = 13, face = 'bold'),
axis.text.x = element_text(size = 11, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text.y = element_text(size = 11, face = 'bold'),
legend.position = legend.position
)
# Return jittered or non-jittered plot?
if (jitter) {
P + geom_jitter(width = 0.1, size = 2)
}
else {
P + geom_point()
}
}
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
library(tidyverse)
library(patchwork)
library(broom)
# Reproducible "random" results
set.seed(40)
# Generate normal data with known parameters
rnorm_fixed = function(N, mu = 0, sd = 1)
scale(rnorm(N)) * sd + mu
# Plot style.
theme_axis = function(P,
jitter = FALSE,
xlim = c(0, 2.5),
ylim = c(0, 2.5),
legend.position = NULL) {
P = P + theme_bw() +
#geom_segment(
#    x = -1000, xend = 1000,
#    y = 0, yend = 0,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#geom_segment(
#    x = 0, xend = 0,
#    y = -1000, yend = 1000,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#coord_cartesian(xlim = xlim, ylim = ylim) +
scale_x_continuous(name = "Groups", breaks = c()) +
scale_y_continuous(name = "") +
theme(
axis.title.x = element_text(size = 13, face = 'bold'),
axis.text.x = element_text(size = 11, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text.y = element_text(size = 11, face = 'bold'),
legend.position = legend.position
)
# Return jittered or non-jittered plot?
if (jitter) {
P + geom_jitter(width = 0.1, size = 2)
}
else {
P + geom_point()
}
}
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
install.packages("patchwork")
# Data
N = 20  # Number of data points per group
D_t2 = data.frame(
x = rep(c(0, 1), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(0, 1), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
#stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something')) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something')) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1,2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
#geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("black", "red", "grey"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
library(MSstats)
?dataProcess()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
version
setwd('/mnt/hc-storage/users/hprice/Rbatch/QPROTmodel')
setRepositories()
setRepositories()
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PathwayAnalysis')
fdrThresh <- 0.05
fileIn <- 'PXD004682_QPROTout_QPROTNorm_1up'
library(clusterProfiler)
#library(ReactomePA)
#library(data.table)
#library(stringr)
library(tidyr)
#library(organism, character.only = TRUE)
library(tidyr)
# SET THE DESIRED ORGANISM HERE
organism = "org.Hs.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
norm <- "QPROT"
fileOut <- paste ("PAout_", fileIn, '_', fdrThresh, sep = '')
# Reads in file and removes top 2 lines
qprot_out <- read.csv(fileIn, header = TRUE)
qprot_out <- qprot_out[,c(1:17)]
View(qprot_out)
# Reads in file and removes top 2 lines
qprot_out <- read.table(fileIn, header = TRUE, sep = '\t')
qprot_out <- qprot_out[,c(1:17)]
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PathwayAnalysis')
fdrThresh <- 0.05
#fileIn <- 'PXD004682_QPROTout_QPROTNorm_1up'
#norm <- "QPROT"
#fileIn <- 'PXD004682_QPROTout_NoNorm_1up'
#norm <- "noNorm"
fileIn <- 'None_DEresults.csv'
norm <- "Log2"
#fileOut <- paste ("PAout_", fileIn, '_', fdrThresh, sep = '')
fileOut <- paste ("results/PAout_", fileIn, '_', fdrThresh, sep = '')
fileOut <- paste ("PAout_", fileIn, '_', fdrThresh, sep = '')
# Reads in file and removes top 2 lines
#qprot_out <- read.table(fileIn, header = TRUE, sep = '\t')
#qprot_out <- qprot_out[,c(1:17)]
qprot_out <- read.csv(fileIn, header = TRUE)
#fileIn <- 'PXD004682_QPROTout_QPROTNorm_1up'
#norm <- "QPROT"
#fileIn <- 'PXD004682_QPROTout_NoNorm_1up'
#norm <- "noNorm"
fileIn <- 'None_DEresults.csv'
# Reads in file and removes top 2 lines
#qprot_out <- read.table(fileIn, header = TRUE, sep = '\t')
#qprot_out <- qprot_out[,c(1:17)]
qprot_out <- read.csv(fileIn, header = TRUE)
# Reads in file and removes top 2 lines
#qprot_out <- read.table(fileIn, header = TRUE, sep = '\t')
#qprot_out <- qprot_out[,c(1:17)]
qprot_out <- read.csv(fileIn, header = TRUE)
qprot_out <- qprot_out[,c(3:20)]
# Column names
colnames(qprot_out) <- c("Protein", "N1", "N2", "N3", "N4", "N5", "N6", "N7",
"T1", "T2", "T3", "T4", "T5", "T6", "LogFoldChange",
"Zstatistic", "fdr")
qprot_out <- qprot_out[order(-abs(qprot_out$Zstatistic)), ]
qprot_out$pVal <- 2*pnorm(-abs(qprot_out$Zstatistic))
qprot_out$BHpVal <- p.adjust(qprot_out$pVal, method = "BH", n = length(qprot_out$pVal))
# Reads in file and removes top 2 lines
#qprot_out <- read.table(fileIn, header = TRUE, sep = '\t')
#qprot_out <- qprot_out[,c(1:17)]
qprot_out <- read.csv(fileIn, header = TRUE)
qprot_out <- qprot_out[,c(3:20)]
# Column names
colnames(qprot_out) <- c("Protein", "N1", "N2", "N3", "N4", "N5", "N6", "N7",
"T1", "T2", "T3", "T4", "T5", "T6", "LogFoldChange",
"Zstatistic", "pVal", "BHpVal")
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 8, nrow = 0))
headers <- c("Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
## Seperate the protein name so the Unipropt accesion can be used
protAcc <- qprot_out %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
BG_react <- select(org.Hs.eg.db, BG_prots, "ENTREZID", "UNIPROT")
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, protAcc$BHpVal < fdrThresh))
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, protAcc$BHpVal >= fdrThresh))
nonDE <- length(NonDE_prots)
DE
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/Normalisation')
fileName <- 'VSN-G-normalized_Log2'
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
input <- read.table(fileName, sep = ',', header = TRUE)
input <- input[, 2:15]
input <- read.table(fileName, sep = ',', header = TRUE)
View(input)
input <- read.table(fileName, sep = '\t', header = TRUE)
View(input)
input <- na.omit(input)
compN <- input[, c(2:14)]
colnames(compN) <- c("N", "N", "N", "N", "N", "N", "N", "T", "T", "T", "T", "T", "T")
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("N", colnames(compN))
index2 <- grep ("T", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
# Puts row names on pVals
results <- cbind(input, pVal)
write.csv(results, outFile)
fileIn <- paste(norm, "_Tresults.csv", sep = '')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = TRUE)
norm <- 'VSN-G-normalized_Log2'
fileIn <- paste(norm, "_Tresults.csv", sep = '')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = TRUE)
View(Tresults)
fileName
input <- read.table(fileName, sep = '\t', header = TRUE)
View(input)
input <- read.table(fileName, sep = '\t', header = TRUE)
input <- na.omit(input)
compN <- input[, c(2:14)]
View(compN)
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("N", colnames(compN))
index2 <- grep ("T", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
# Puts row names on pVals
results <- cbind(input, pVal)
colnames(compN) <- c("N", "N", "N", "N", "N", "N", "N", "T", "T", "T", "T", "T", "T")
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("N", colnames(compN))
index2 <- grep ("T", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
# Puts row names on pVals
results <- cbind(input, pVal)
View(results)
write.csv(results, outFile)
