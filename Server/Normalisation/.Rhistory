results <- cbind(input, pVal)
setwd('/mnt/hc-storage/users/hprice/Pipeline/PathwayAnalysis/T')
write.table(file=outFile, results,sep="\t",
row.names=F,col.names=cols, quote = FALSE)
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
cols <- input[1,]
colNum <- length(cols)
compN <- input[-1, c(2:colNum)]
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
pVal <- rbind('pVal', pVal)
# Puts row names on pVals
results <- cbind(input, pVal)
setwd('/mnt/hc-storage/users/hprice/Pipeline/PathwayAnalysis/T')
write.table(file=outFile, results,sep="\t",
row.names=F,col.names=cols, quote = FALSE)
#write.csv(results, outFile)
View(results)
write.table(file=outFile, results,sep="\t",
row.names=F, quote = FALSE)
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
write.table(file=outFile, results,sep=",",
row.names=F, quote = FALSE)
write.table(file=outFile, results,sep=",",
row.names=F,col.names=F, quote = FALSE)
fileIn <- paste(dataset, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste ("results/", dataset ,"_T_PAout_", norm, sep = '')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =TRUE)
Tresults <- Tresults[,-1]
cols <- as.vector(Tresults[1,])
cols[1] <- 'Protein'
Tresults <- Tresults[-1,]
p <- ncol(Tresults)
## calculate adj p values
Tresults <- as.data.frame(Tresults[order(Tresults[,p]), ])
Tresults$BHpVal <- p.adjust(as.numeric(Tresults[,p]), method = "BH", n = length(Tresults[,p]))
View(Tresults)
# Reads in file and removes top 2 lines
Tresults <- as.matrix(read.table(fileIn, header =TRUE))
# Reads in file and removes top 2 lines
Tresults <- as.matrix(read.table(fileIn, header =F))
fileName <- paste(dataSet, "_" , norm, "-normalized_Log2", sep = "")
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
cols <- input[1,]
colNum <- length(cols)
compN <- input[-1, c(2:colNum)]
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
pVal <- rbind('pVal', pVal)
# Puts row names on pVals
results <- cbind(input, pVal)
View(results)
write.table(file=outFile, results,sep=",",
row.names=F,col.names=F, quote = FALSE)
write.table(file=outFile, results,sep=",",
row.names=F,col.names=F, quote = FALSE)
colnames(results) <- cols
cols <- c(cols, 'pVal')
colnames(results) <- cols
resluts <- results[-1,]
results <- results[-1,]
write.table(file=outFile, results,sep=",",
row.names=F,col.names=F, quote = FALSE)
fileName <- paste(dataSet, "_" , norm, "-normalized_Log2", sep = "")
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
cols <- input[1,]
colNum <- length(cols)
compN <- input[-1, c(2:colNum)]
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
pVal <- rbind('pVal', pVal)
# Puts row names on pVals
results <- cbind(input, pVal)
write.csv(results, outFile)
fileIn <- paste(dataset, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste ("results/", dataset ,"_T_PAout_", norm, sep = '')
# Reads in file and removes top 2 lines
Tresults <- as.matrix(read.table(fileIn, header =F))
# Reads in file and removes top 2 lines
Tresults <- as.matrix(read.table(fileIn, skip = 1, header =F))
# Reads in file and removes top 2 lines
Tresults <- read.table(fileIn, skip = 1, header =F)
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =TRUE)
View(resluts)
View(resluts)
fileName <- paste(dataSet, "_" , norm, "-normalized_Log2", sep = "")
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
cols <- input[1,]
colNum <- length(cols)
compN <- input[-1, c(2:colNum)]
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
pVal <- rbind('pVal', pVal)
# Puts row names on pVals
results <- cbind(input, pVal)
setwd('/mnt/hc-storage/users/hprice/Pipeline/PathwayAnalysis/T')
write.csv(results, outFile)
fileIn <- paste(dataset, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste ("results/", dataset ,"_T_PAout_", norm, sep = '')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =TRUE)
Tresults <- Tresults[,-1]
cols <- as.vector(Tresults[1,])
cols[1] <- 'Protein'
Tresults <- Tresults[-1,]
p <- ncol(Tresults)
## calculate adj p values
Tresults <- as.data.frame(Tresults[order(Tresults[,p]), ])
Tresults$BHpVal <- p.adjust(as.numeric(Tresults[,p]), method = "BH", n = length(Tresults[,p]))
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[j1] <- paste(cols[j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[j2] <- paste(cols[j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
Tresults <- as.data.frame(Tresults)
View(results)
results <- results[order(results$pVal), ]
fileName <- paste(dataSet, "_" , norm, "-normalized_Log2", sep = "")
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
cols <- input[1,]
colNum <- length(cols)
compN <- input[-1, c(2:colNum)]
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
pVal <- rbind('pVal', pVal)
# Puts row names on pVals
results <- cbind(input, pVal)
results <- as.data.frame(results[order(results$pVal), ])
results <- results[order(pVal), ]
results$BHpVal <- p.adjust(as.numeric(results$pVal), method = "BH", n = length(results$pVal))
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
cols <- input[1,]
colNum <- length(cols)
View(input)
compN <- input[-1, c(2:colNum)]
View(compN)
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
input <- input[-1,]
# Puts row names on pVals
results <- cbind(input, pVal)
results <- results[order(pVal), ]
results$BHpVal <- p.adjust(as.numeric(pVal), method = "BH", n = length(pVal))
# Puts row names on pVals
results <- cbind(input, pVal)
results <- results[order(pVal), ]
BHpVal <- p.adjust(as.numeric(pVal), method = "BH", n = length(pVal))
results <- cbind(results, BHpVal)
# Puts row names on pVals
results <- cbind(input, pVal)
#results <- results[order(pVal), ]
BHpVal <- p.adjust(as.numeric(pVal), method = "BH", n = length(pVal))
results <- cbind(results, BHpVal)
results <- results[order(pVal), ]
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
View(input)
input <- na.omit(input)
cols <- input[1,]
input <- input[-1,]
colNum <- length(cols)
compN <- input[, c(2:colNum)]
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
index1 <- grep ("1", colnames(compN))
k = 1
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
View(ttest)
View(ttest)
pVal <- rbind (pVal, ttest$p.value)
pVal <- rbind (pVal, ttest$p.value)
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
#pVal <- rbind('pVal', pVal)
# Puts row names on pVals
results <- cbind(input, pVal)
norm <- None
norm <- 'None'
dataSet <- 'PXD004682'
fileName <- paste(dataSet, "_" , norm, "-normalized_Log2", sep = "")
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
cols <- input[1,]
input <- input[-1,]
colNum <- length(cols)
compN <- input[, c(2:colNum)]
colnames <- cols[,-1]
colnames <- as.vector(as.character(colnames))
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
input <- na.omit(input)
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
cols <- input[1,]
View(input)
input <- input[-1,]
colNum <- length(cols)
compN <- input[, c(2:colNum)]
View(compN)
colnames <- cols[,-1]
colnames <- cols[-1]
colnames <- as.vector(as.character(colnames))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
norm <- 'None'
dataSet <- 'PXD004682'
fileName <- paste(dataSet, "_" , norm, "-normalized_Log2", sep = "")
#fileName <- 'subset1'
#fileIn <- paste(fileName, '.csv', sep = '')
outFile <- paste(fileName, "_Tresults.csv", sep = '')
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
cols <- input[1,]
input <- input[-1,]
colNum <- length(cols)
compN <- input[, c(2:colNum)]
colnames <- cols[-1]
colnames
index1 <- grep ("1", colnames(compN))
colnames <- as.vector(as.character(colnames))
colnames
index1 <- grep ("1", colnames(compN))
index1
colnames(compN)
colnms <- cols[-1]
colnms <- as.vector(as.character(colnames))
colnames(compN) <- colnms
index1 <- grep ("1", colnames(compN))
index1 <- grep ("1", colnames(compN))
#Variable declaration
ttest<- NULL
pVal <- NULL
#Initialization
count <- (1:nrow(compN))
#Performs t.test
for (k in count){
index1 <- grep ("1", colnames(compN))
index2 <- grep ("2", colnames(compN))
#
# #check if columns exist
if(length(index1) == 0) next
if(length(index2) == 0) next
#Welch Two Sample t-test - EXCEL: two-tailed, unequal variance =T.TEST($C2:$E2,$F2:$H2,2,3)
ttest <- t.test (as.numeric(compN[k,][index1]), na.rm = TRUE, as.numeric(compN[k,][index2]), na.rm = TRUE, paired = FALSE)
pVal <- rbind (pVal, ttest$p.value)
}
#pVal <- rbind('pVal', pVal)
# Puts row names on pVals
results <- cbind(input, pVal)
View(results)
#results <- results[order(pVal), ]
BHpVal <- p.adjust(as.numeric(pVal), method = "BH", n = length(pVal))
results <- cbind(input, pVal, BHpVal)
results <- results[order(pVal), ]
input <- as.matrix(read.table(fileName, sep = '\t', header = FALSE))
cols <- input[1,]
input <- input[-1,]
colNum <- length(cols)
compN <- input[, c(2:colNum)]
colnms <- cols[-1]
colnames(compN) <- colnms
#colnms <- as.vector(as.character(colnames))
colnames(compN) <- colnms
cols <- c(cols, 'pVal', 'BHpVal')
colnames(results) <- cols
write.csv(results, outFile)
fileIn <- paste(dataset, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
norm <- 'None'
dataSet <- 'PXD004682'
fileIn <- paste(dataset, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
fileIn <- paste(dataSet, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste ("results/", dataset ,"_T_PAout_", norm, sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste ("results/", dataSet ,"_T_PAout_", norm, sep = '')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =TRUE)
Tresults <- Tresults[,-1]
View(Tresults)
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =TRUE)
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =FALSE)
Tresults <- Tresults[,-1]
cols <- as.vector(Tresults[1,])
cols[1] <- 'Protein'
Tresults <- Tresults[-1,]
p <- ncol(Tresults)
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[j1] <- paste(cols[j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[j2] <- paste(cols[j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
Tresults <- as.data.frame(Tresults)
thresholds <- c(0.000001, 0.000002, 0.000003, 0.000004, 0.000005, 0.000006, 0.000007, 0.000008, 0.000009,
0.00001, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007, 0.00008, 0.00009,
0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009,
0.001,  0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009,
0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1)
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
fdrThresh <- 0.05
## Seperate the protein name so the Unipropt accesion can be used
protAcc <- Tresults %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
#library(ReactomePA)
#library(data.table)
#library(stringr)
library(tidyr)
# SET THE DESIRED ORGANISM HERE
organism = "org.Hs.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
library(clusterProfiler)
## Seperate the protein name so the Unipropt accesion can be used
protAcc <- Tresults %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
BG_react <- select(org.Hs.eg.db, BG_prots, "ENTREZID", "UNIPROT")
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
DE <- length(DE_prots)
