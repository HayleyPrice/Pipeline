# Generate normal data with known parameters
rnorm_fixed = function(N, mu = 0, sd = 1)
scale(rnorm(N)) * sd + mu
# Plot style.
theme_axis = function(P,
jitter = FALSE,
xlim = c(0, 2.5),
ylim = c(0, 2.5),
legend.position = NULL) {
P = P + theme_bw() +
#geom_segment(
#    x = -1000, xend = 1000,
#    y = 0, yend = 0,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#geom_segment(
#    x = 0, xend = 0,
#    y = -1000, yend = 1000,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#coord_cartesian(xlim = xlim, ylim = ylim) +
scale_x_continuous(name = "Groups", breaks = c()) +
scale_y_continuous(name = "") +
theme(
axis.title.x = element_text(size = 13, face = 'bold'),
axis.text.x = element_text(size = 11, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text.y = element_text(size = 11, face = 'bold'),
legend.position = legend.position
)
# Return jittered or non-jittered plot?
if (jitter) {
P + geom_jitter(width = 0.1, size = 2)
}
else {
P + geom_point()
}
}
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
library(tidyverse)
library(patchwork)
library(broom)
# Reproducible "random" results
set.seed(40)
# Generate normal data with known parameters
rnorm_fixed = function(N, mu = 0, sd = 1)
scale(rnorm(N)) * sd + mu
# Plot style.
theme_axis = function(P,
jitter = FALSE,
xlim = c(0, 2.5),
ylim = c(0, 2.5),
legend.position = NULL) {
P = P + theme_bw() +
#geom_segment(
#    x = -1000, xend = 1000,
#    y = 0, yend = 0,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#geom_segment(
#    x = 0, xend = 0,
#    y = -1000, yend = 1000,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#coord_cartesian(xlim = xlim, ylim = ylim) +
scale_x_continuous(name = "Groups", breaks = c()) +
scale_y_continuous(name = "") +
theme(
axis.title.x = element_text(size = 13, face = 'bold'),
axis.text.x = element_text(size = 11, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text.y = element_text(size = 11, face = 'bold'),
legend.position = legend.position
)
# Return jittered or non-jittered plot?
if (jitter) {
P + geom_jitter(width = 0.1, size = 2)
}
else {
P + geom_point()
}
}
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
install.packages("patchwork")
# Data
N = 20  # Number of data points per group
D_t2 = data.frame(
x = rep(c(0, 1), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(0, 1), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
#stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something')) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something')) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1,2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
#geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("black", "red", "grey"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
library(MSstats)
?dataProcess()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
version
setwd('/mnt/hc-storage/users/hprice/Rbatch/QPROTmodel')
setRepositories()
setRepositories()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationHub")
citation("AnnotationHub")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MSstats")
# Run MSstats
# load the library
library(MSstats)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("metaseqR2")
install.packages("conquer")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("metaseqR2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("metaseqR2", force = TRUE)
BiocManager::install("conquer", force = TRUE, dependencies = TRUE)
setwd("Z:/hprice/ThesisData/PXD004501/Raw/tTest")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
source("https://bioconductor.org/biocLite.R")
biocLite("RDAVIDWebService")
source("http://bioconductor.org/biocLite.R")
BiocManager::install("RDAVIDWebService")
source("http://bioconductor.org/biocLite.R")
biocLite("RDAVIDWebService")
BiocManager::install("RDAVIDWebService")
library(MSstats)
library(reshape2)
library(data.table)
library(plyr)
library(stringr)
library(tidyr)
library("RDAVIDWebService")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
library("RDAVIDWebService")
library(ggplot2)
# Run MSstats
# load the library
library(MSstats)
library("RDAVIDWebService")
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
library(clusterProfiler)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PXD012039/Ttest/Results')
library(clusterProfiler)
#library(ReactomePA)
#library(data.table)
#library(stringr)
library(tidyr)
library(rlang)
#library(ReactomePA)
#library(data.table)
#library(stringr)
library(tidyr)
install.packages(c("colorspace", "dplyr", "glue", "jsonlite", "magrittr", "RCurl", "rlang", "RSQLite", "tidyr"))
#library(ReactomePA)
#library(data.table)
#library(stringr)
library(tidyr)
library(clusterProfiler)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PXD012039/Ttest/Results')
dataSet <- 'PXD012039'
norm <- 'None'
fileIn <- paste(dataSet, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste (dataSet ,"_T_PAout_", norm, sep = '')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =FALSE)
Tresults <- Tresults[,-1]
cols <- as.vector(Tresults[1,])
cols[1] <- 'Protein'
Tresults <- Tresults[-1,]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[j1] <- paste(cols[j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[j2] <- paste(cols[j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
Tresults <- as.data.frame(Tresults)
thresholds <- c(0.000001, 0.000002, 0.000003, 0.000004, 0.000005, 0.000006, 0.000007, 0.000008, 0.000009,
0.00001, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007, 0.00008, 0.00009,
0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009,
0.001,  0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009,
0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1)
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
fdrThresh <- 0.05
## Seperate the protein name so the Unipropt accesion can be used
#protAcc <- Tresults %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
protAcc <- Tresults %>% separate(Protein, c("num", "Uniprot_Acc"), sep = "\\::")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
DE <- length(DE_prots)
fdrThresh <- 0.1
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) >= fdrThresh))
norm <- 'AI-G'
fileIn <- paste(dataSet, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste (dataSet ,"_T_PAout_", norm, sep = '')
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =FALSE)
Tresults <- Tresults[,-1]
cols <- as.vector(Tresults[1,])
cols[1] <- 'Protein'
Tresults <- Tresults[-1,]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[j1] <- paste(cols[j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[j2] <- paste(cols[j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
Tresults <- as.data.frame(Tresults)
thresholds <- c(0.000001, 0.000002, 0.000003, 0.000004, 0.000005, 0.000006, 0.000007, 0.000008, 0.000009,
0.00001, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007, 0.00008, 0.00009,
0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009,
0.001,  0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009,
0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1)
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
fdrThresh <- 0.1
## Seperate the protein name so the Unipropt accesion can be used
#protAcc <- Tresults %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
protAcc <- Tresults %>% separate(Protein, c("num", "Uniprot_Acc"), sep = "\\::")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) < fdrThresh))
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$BHpVal) >= fdrThresh))
nonDE <- length(NonDE_prots)
# Get functional annotation chart as R object and save to file
GO_BPresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'BP',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
# SET THE DESIRED ORGANISM HERE
#organism = "org.Hs.eg.db"
organism = "org.Mm.eg.db"
# Get functional annotation chart as R object and save to file
GO_BPresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'BP',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_BPresult)) {
GO_BPsimply <- simplify(GO_BPresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOBPnum <- nrow(GO_BPsimply)
} else {
GOBPnum <- 0
}
nrow(GO_BPresult)
View(GO_BPresult)
