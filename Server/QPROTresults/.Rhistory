axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('BoxPlot.png', height = 500, width = 700)
print(q)
dev.off()
r <- ggplot(results, aes(x = Obs, y = fdr)) +
geom_point(aes(color = DE)) +
facet_grid(cols = vars(Data))
r
library(ggplot2)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTresults')
datasets <- c('PXD004501', 'PXD004682', 'PXD007592')
results <- data.frame()
cols <- c('fdr', 'DE', 'Data')
for(data in datasets) {
QPROT <- read.table(paste(data, '_1up_Normalyser_qprot_qprot_fdr', sep = ''),
header=TRUE, sep="\t")
QPROTfdr <- as.data.frame(sort(QPROT$fdr))
colnames(QPROTfdr) <- 'fdr'
QPROTfdr$Obs <- 1:nrow(QPROTfdr)
QPROTfdr$DE <- 'QPROT'
QPROTfdr$Data <- data
QM <- read.table(paste(data, '_1up_Normalyser_qprot_qprot_fdr','_FDRresults.csv', sep = ''),
header=TRUE, sep=",")
QMfdr <- as.data.frame(sort(QM$QM_fdr))
colnames(QMfdr) <- 'fdr'
QMfdr$Obs <- 1:nrow(QMfdr)
QMfdr$DE <- 'QM'
QMfdr$Data <- data
results <- rbind(results, QPROTfdr, QMfdr)
}
results$DE <- factor(results$DE, levels = c('QPROT', 'QM'), labels = c('QPROT', 'QPROT\nModel'))
results$Data <- factor(results$Data, levels = datasets)
p <- ggplot(results, aes(x = DE, y = fdr)) +
geom_violin() +
facet_grid(cols = vars(Data)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = 'False discovery rate') +
theme_bw() +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('VioloinPlot.png', height = 500, width = 700)
print(p)
dev.off()
q <- ggplot(results, aes(x = DE, y = fdr)) +
geom_boxplot() +
facet_grid(cols = vars(Data)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = 'False discovery rate') +
theme_bw() +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('BoxPlot.png', height = 500, width = 700)
print(q)
dev.off()
r <- ggplot(results, aes(x = Obs, y = fdr)) +
geom_point(aes(color = DE)) +
facet_grid(cols = vars(Data))
r
('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTresults')
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTresults')
suppressPackageStartupMessages(library(clusterProfiler))
#library(ReactomePA)
#library(data.table)
#library(stringr)
suppressPackageStartupMessages(library(tidyr))
# SET THE DESIRED ORGANISM HERE
organism = "org.Hs.eg.db"
DEmethod <- "QM_FDR"
norm <- "None"
fileIn <- 'PXD004501_1up_Normalyser_qprot_qprot_fdr_FDRresults.csv'
dataSet <- 'PXD004501'
fdrThresh <- 0.05
fileIn <- 'PXD004501_1up_Normalyser_qprot_qprot_fdr'
fileOut <- paste (fdrThresh, fileIn, "_QMfdr_PAout.csv", sep = '_')
# Reads in file and removes top 2 lines
#qprot_out <- read.table(fileIn, header = TRUE)
qprot_out <- read.csv(fileIn, header = TRUE)
View(qprot_out)
View(qprot_out)
fileI <- paste(fileIn, "_FDRresults.csv", sep = '')
# Reads in file and removes top 2 lines
#qprot_out <- read.table(fileIn, header = TRUE)
qprot_out <- read.csv(fileI, header = TRUE)
View(qprot_out)
#qprot_out <- qprot_out[order(qprot_out$fdr), ]
qprot_out <- qprot_out[order(qprot_out$QM_fdr), ]
## create dataframe to store number of significant terms for each threshold
thresholdResults <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c("DE", "Normalisation", "Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(thresholdResults) <- headers
## Seperate the protein name so the Unipropt accesion can be used
protAcc <- qprot_out %>% separate(Protein, c("SP", "Uniprot_Acc", "Entrez"), sep = "\\|")
## List of background proteins for enrichment analysis
BG_prots <- protAcc$Uniprot_Acc
## Initialises vector of results
results <- NULL
# Create list of DE proteins and all proteins
DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$QM_fdr) < fdrThresh))
#DE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$fdr) < fdrThresh))           ##QPROT test
DE <- length(DE_prots)
NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$QM_fdr) >= fdrThresh))
#NonDE_prots <- as.vector(subset(protAcc$Uniprot_Acc, as.numeric(protAcc$fdr) >= fdrThresh))    ##QPROT test
nonDE <- length(NonDE_prots)
if (DE > 0) {
GO_BPresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'BP',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_BPresult)) {
GO_BPsimply <- simplify(GO_BPresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOBPnum <- nrow(GO_BPsimply)
} else {
GOBPnum <- 0
}
GO_MFresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'MF',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_MFresult)) {
GO_MFsimply <- simplify(GO_MFresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOMFnum <- nrow(GO_MFsimply)
} else {
GOMFnum <- 0
}
GO_CCresult <- enrichGO(gene = DE_prots,
OrgDb = organism,
keyType = 'UNIPROT',
ont = 'CC',
universe = BG_prots,
pvalueCutoff = 0.05,
pAdjustMethod = 'BH')
if(!is.null(GO_CCresult)) {
GO_CCsimply <- simplify(GO_CCresult,
cutoff = 0.7,
by = "p.adjust",
select_fun = min)
GOCCnum <- nrow(GO_CCsimply)
}else {
GOCCnum <- 0
}
totGO <- GOBPnum + GOMFnum + GOCCnum
## Summary of results
results <- data.frame(DE = DEmethod, Normalisation = norm, Threshold = fdrThresh, Go_BP = GOBPnum, Go_MF = GOMFnum,
Go_CC = GOCCnum, Total = totGO, DEs = DE)
## Add to table of results
thresholdResults <- rbind(thresholdResults, results)
} else {
print(paste("No DE proteins at threshold: ", fdrThresh, sep = ""))
flush.console()
results <- data.frame(DE = DEmethod, Normalisation = norm, Threshold =fdrThresh, Go_BP = 0, Go_MF = 0,
Go_CC = 0, Total = 0, DEs = DE)
thresholdResults <- rbind(thresholdResults, results)
}
View(thresholdResults)
View(thresholdResults)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTresults')
datasets <- c('PXD004501', 'PXD004682', 'PXD007592')
results <- data.frame()
for(data in datasets) {
QPROT <- read.csv(paste(data, '_DE.QP_FDR.QM/ResultsSummary_QPROT_test.csv', sep = ''), header=TRUE)
QPROT <- QPROT[,c(-1,-2)]
QPROT$Data <- data
QM <- read.table(paste('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/',
data, '/Qmodel/PA/', data, '_PAout_None.csv', sep = ''),
header=TRUE, sep=",")
QM <- QM[,-1]
QM$DE <- 'QM'
QM$Data <- data
results <- rbind(results, QPROT, QM)
}
results$DE <- factor(results$DE, levels = c('QPROT', 'QM'), labels = c('QPROT', 'QPROT\nModel'))
results$Data <- factor(results$Data, levels = datasets)
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
facet_grid(rows = vars(Data))
library(ggplot2)
library(scales)
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
facet_grid(rows = vars(Data))
png('ThreshComp.png', height = 500, width = 700)
print(r)
dev.off()
View(r)
View(results)
datasets <- c('PXD004501', 'PXD004682', 'PXD007592')
results <- data.frame()
#cols <- c('fdr', 'DE', 'Data')
for(data in datasets) {
QPROT <- read.csv(paste(data, '_DE.QP_FDR.QM/ResultsSummary_QPROT_test.csv', sep = ''), header=TRUE)
QPROT <- QPROT[,c(-1,-2)]
QPROT$Data <- data
QM <- read.table(paste('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/',
data, '/Qmodel/PA/', data, '_PAout_None.csv', sep = ''),
header=TRUE, sep=",")
QM <- QM[,-1]
QM$DE <- 'QM'
QM$Data <- data
results <- rbind(results, QPROT, QM)
}
results$DE <- factor(results$DE, levels = c('QM_FDR', 'QM'), labels = c('QPROT', 'QPROT\nModel'))
results$Data <- factor(results$Data, levels = datasets)
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
facet_grid(rows = vars(Data))
png('ThreshComp.png', height = 500, width = 700)
print(r)
dev.off()
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) =
theme_bw() +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('ThreshComp.png', height = 500, width = 700)
p
p
p
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) =
theme_bw() +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) +
theme_bw() +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('ThreshComp.png', height = 500, width = 700)
print(r)
dev.off()
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) +
theme_bw() +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(size = 16, face = 'bold'),
legend.text = element_text(size = 14, face = 'bold'))
png('ThreshComp.png', height = 500, width = 700)
print(r)
dev.off()
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) +
theme_bw() +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(size = 16, face = 'bold'),
legend.text = element_text(size = 14, face = 'bold'))
r <- r + scale_fill_discrete(name = 'Differential expression method')
png('ThreshComp.png', height = 500, width = 700)
print(r)
dev.off()
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) +
theme_bw() +
labs(fill='NEW LEGEND TITLE') +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(size = 16, face = 'bold'),
legend.text = element_text(size = 14, face = 'bold'))
r
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) +
theme_bw() +
labs(color='NEW LEGEND TITLE') +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(size = 16, face = 'bold'),
legend.text = element_text(size = 14, face = 'bold'))
r
r <- ggplot(results, aes(x = Threshold, y = Total)) +
geom_point(aes(color = DE)) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(name = 'Total number of terms') +
facet_grid(rows = vars(Data)) +
theme_bw() +
labs(color='Differential expression method') +
theme(strip.text.y = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(size = 16, face = 'bold'),
legend.text = element_text(size = 14, face = 'bold'))
png('ThreshComp.png', height = 500, width = 700)
print(r)
dev.off()
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTresults')
datasets <- c('PXD004501', 'PXD004682', 'PXD007592')
results <- data.frame()
cols <- c('fdr', 'DE', 'Data')
for(data in datasets) {
QPROT <- read.table(paste(data, '_1up_Normalyser_qprot_qprot_fdr', sep = ''),
header=TRUE, sep="\t")
QPROTfdr <- as.data.frame(sort(QPROT$fdr))
colnames(QPROTfdr) <- 'fdr'
QPROTfdr$Obs <- 1:nrow(QPROTfdr)
QPROTfdr$DE <- 'QPROT'
QPROTfdr$Data <- data
QM <- read.table(paste(data, '_1up_Normalyser_qprot_qprot_fdr','_FDRresults.csv', sep = ''),
header=TRUE, sep=",")
QMfdr <- as.data.frame(sort(QM$QM_fdr))
colnames(QMfdr) <- 'fdr'
QMfdr$Obs <- 1:nrow(QMfdr)
QMfdr$DE <- 'QM'
QMfdr$Data <- data
results <- rbind(results, QPROTfdr, QMfdr)
}
results$DE <- factor(results$DE, levels = c('QPROT', 'QM'), labels = c('QPROT', 'QPROT\nModel'))
results$Data <- factor(results$Data, levels = datasets)
results$DE <- factor(results$DE, levels = c('QPROT', 'QM'), labels = c('QPROT', 'QPROT\nModel'))
results$Data <- factor(results$Data, levels = datasets)
p <- ggplot(results, aes(x = DE, y = fdr)) +
geom_violin() +
facet_grid(cols = vars(Data)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = 'False discovery rate') +
theme_bw() +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('VioloinPlot.png', height = 300, width = 700)
print(p)
dev.off()
png('VioloinPlot.png', height = 400, width = 700)
print(p)
dev.off()
dev.off()
dev.off()
dev.off()
r <- ggplot(results, aes(x = Obs, y = fdr)) +
geom_point(aes(color = DE)) +
facet_grid(cols = vars(Data)) +
scale_y_continuous(name = 'FDR') +
scale_x_continuous(name = 'Observations') +
theme_bw() +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('FDRComp.png', height = 400, width = 700)
print(r)
dev.off()
View(results)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTresults')
datasets <- c('PXD004501', 'PXD004682', 'PXD007592')
results <- data.frame()
cols <- c('fdr', 'DE', 'Data')
for(data in datasets) {
QPROT <- read.table(paste(data, '_1up_Normalyser_qprot_qprot_fdr', sep = ''),
header=TRUE, sep="\t")
QPROTfdr <- as.data.frame(sort(QPROT$fdr))
colnames(QPROTfdr) <- 'fdr'
QPROTfdr$Obs <- 1:nrow(QPROTfdr)
QPROTfdr$DE <- 'QPROT'
QPROTfdr$Data <- data
QM <- read.table(paste(data, '_1up_Normalyser_qprot_qprot_fdr','_FDRresults.csv', sep = ''),
header=TRUE, sep=",")
QMfdr <- as.data.frame(sort(QM$QM_fdr))
colnames(QMfdr) <- 'fdr'
QMfdr$Obs <- 1:nrow(QMfdr)
QMfdr$DE <- 'QM'
QMfdr$Data <- data
results <- rbind(results, QPROTfdr, QMfdr)
}
View(results)
results$DE <- factor(results$DE, levels = c('QPROT', 'QM'), labels = c('QPROT', 'QPROT\nModel'))
results$Data <- factor(results$Data, levels = datasets)
r <- ggplot(results, aes(x = Obs, y = fdr)) +
geom_point(aes(color = DE)) +
facet_grid(cols = vars(Data)) +
scale_y_continuous(name = 'FDR') +
scale_x_continuous(name = 'Observations') +
theme_bw() +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('FDRComp.png', height = 400, width = 700)
print(r)
dev.off()
r <- ggplot(results, aes(x = Obs, y = fdr)) +
geom_point(aes(color = DE)) +
facet_grid(cols = vars(Data)) +
scale_y_continuous(name = 'FDR') +
scale_x_continuous(name = 'Observations') +
theme_bw() +
labs(color='Differential expression method') +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(size = 16, face = 'bold'),
legend.text = element_text(size = 14, face = 'bold'))
png('FDRComp.png', height = 400, width = 700)
print(r)
dev.off()
r <- ggplot(results, aes(x = Obs, y = fdr)) +
geom_point(aes(color = DE)) +
facet_grid(cols = vars(Data)) +
scale_y_continuous(name = 'FDR') +
scale_x_continuous(name = 'Observations') +
theme_bw() +
labs(color='FDR method') +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 14, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(size = 16, face = 'bold'),
legend.text = element_text(size = 14, face = 'bold'))
png('FDRComp.png', height = 400, width = 700)
print(r)
dev.off()
p <- ggplot(results, aes(x = DE, y = fdr)) +
geom_violin() +
facet_grid(cols = vars(Data)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = 'False discovery rate') +
theme_bw() +
theme(strip.text.x = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 14, face = 'bold'),
axis.text.y = element_text(size = 12, face = 'bold'))
png('VioloinPlot.png', height = 400, width = 700)
print(p)
dev.off()
