if (jitter) {
P + geom_jitter(width = 0.1, size = 2)
}
else {
P + geom_point()
}
}
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
library(tidyverse)
library(patchwork)
library(broom)
# Reproducible "random" results
set.seed(40)
# Generate normal data with known parameters
rnorm_fixed = function(N, mu = 0, sd = 1)
scale(rnorm(N)) * sd + mu
# Plot style.
theme_axis = function(P,
jitter = FALSE,
xlim = c(0, 2.5),
ylim = c(0, 2.5),
legend.position = NULL) {
P = P + theme_bw() +
#geom_segment(
#    x = -1000, xend = 1000,
#    y = 0, yend = 0,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#geom_segment(
#    x = 0, xend = 0,
#    y = -1000, yend = 1000,
#    lty = 2, color = 'dark gray', lwd = 0.5
#) +
#coord_cartesian(xlim = xlim, ylim = ylim) +
scale_x_continuous(name = "Groups", breaks = c()) +
scale_y_continuous(name = "") +
theme(
axis.title.x = element_text(size = 13, face = 'bold'),
axis.text.x = element_text(size = 11, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text.y = element_text(size = 11, face = 'bold'),
legend.position = legend.position
)
# Return jittered or non-jittered plot?
if (jitter) {
P + geom_jitter(width = 0.1, size = 2)
}
else {
P + geom_point()
}
}
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
install.packages("patchwork")
# Data
N = 20  # Number of data points per group
D_t2 = data.frame(
x = rep(c(0, 1), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(0, 1), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
#stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something')) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something')) +
geom_segment(x = -0.5, xend = 0.5, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = -10, xend = 10, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1,2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 2) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 0.3, lwd = 2, aes(color = 'beta_0')) +
geom_segment(x = 0, xend = 1, y = 0.3, yend = 1.3, lwd = 2, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("blue", "red", "darkblue"), labels=c(bquote(beta[0]*" (group 1 mean)"), bquote(beta[1]*" (slope = difference)"), bquote(beta[0]+beta[1]%.%1*" (group 2 mean)")))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'gray'), lwd = 1) +
#geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("gray", "red", "black"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
# Data
N = 6  # Number of data points per group
D_t2 = data.frame(
x = rep(c(1, 2), each=N),
y = c(rnorm_fixed(N, 0.3, 0.3), rnorm_fixed(N, 1.3, 0.3))
)
# Plot
P_t2 = ggplot(D_t2, aes(x=x, y=y)) +
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..,  color = 'something'), lwd = 1) +
geom_segment(x = -0.25, xend = 0.25, y = 0.3, yend = 0.3, lwd = 1, aes(color = 'beta_0')) +
geom_segment(x = 1, xend = 2, y = 0.3, yend = 1.3, lwd = 1, aes(color = 'beta_1')) +
scale_color_manual(name = NULL, values = c("black", "red", "grey"),
labels=c(bquote(beta[0]),
bquote(beta[1]),
bquote(beta[0]+beta[1]%.%1)))
#scale_x_discrete(breaks=c(0.5, 1.5), labels=c('1', '2'))
theme_axis(P_t2, jitter = TRUE, xlim = c(-0.3, 2), legend.position = c(0.53, 0.08))
library(MSstats)
?dataProcess()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
version
setwd('/mnt/hc-storage/users/hprice/Rbatch/QPROTmodel')
setRepositories()
setRepositories()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationHub")
citation("AnnotationHub")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MSstats")
# Run MSstats
# load the library
library(MSstats)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("metaseqR2")
install.packages("conquer")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("metaseqR2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("metaseqR2", force = TRUE)
BiocManager::install("conquer", force = TRUE, dependencies = TRUE)
setwd("Z:/hprice/ThesisData/PXD004501/Raw/tTest")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
source("https://bioconductor.org/biocLite.R")
biocLite("RDAVIDWebService")
source("http://bioconductor.org/biocLite.R")
BiocManager::install("RDAVIDWebService")
source("http://bioconductor.org/biocLite.R")
biocLite("RDAVIDWebService")
BiocManager::install("RDAVIDWebService")
library(MSstats)
library(reshape2)
library(data.table)
library(plyr)
library(stringr)
library(tidyr)
library("RDAVIDWebService")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
library("RDAVIDWebService")
library(ggplot2)
# Run MSstats
# load the library
library(MSstats)
library("RDAVIDWebService")
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
library(clusterProfiler)
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PathwayAnalysis/T')
norm <- "RLR-G"
dataset <- 'PXD004682'
fileIn <- paste(dataset, "_", norm, "-normalized_Log2_Tresults.csv", sep = '')
#fileOut <- paste ("PAout_", norm, sep = '')
fileOut <- paste ("results/T_PAout_", norm, sep = '')
# Reads in file and removes top 2 lines
Tresults <- as.data.frame(read.csv(fileIn, header = FALSE))
# Reads in file and removes top 2 lines
Tresults <- as.matrix(read.csv(fileIn, header = FALSE))
Tresults <- Tresults[,-1]
cols <- Tresults[2,]
cols <- cols[1,-1]
cols <- cbind('Protein', cols)
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
View(Tresults)
# Reads in file and removes top 2 lines
Tresults <- as.matrix(read.csv(fileIn, header = FALSE))
View(Tresults)
Tresults <- Tresults[,-1]
cols <- Tresults[2,]
cols <- cols[-1]
cols <- cbind('Protein', cols)
cols <- Tresults[2,]
cols <- cols[-1]
cols
class(cols)
cols <- as.data.frame(Tresults[2,])
View(cols)
cols <- cols[-1]
cols <- as.data.frame(Tresults[2,])
# Reads in file and removes top 2 lines
Tresults <- as.matrix(read.csv(fileIn, header = FALSE))
Tresults <- Tresults[,-1]
cols <- as.data.frame(Tresults[2,])
View(cols)
cols <- cols[-1,]
cols <- rbind('Protein', cols)
cols <- as.data.frame(Tresults[2,])
cols <- cols[-1,]
cols <- cbind('Protein', cols)
cols <- as.vector(Tresults[2,])
cols <- cols[-1,]
cols <- rbind('Protein', cols)
cols <- as.vector(Tresults[2,])
cols <- cols[-1,]
cols <- as.vector(Tresults[2,])
cols [1,] <- 'Protein'
cols[1,] <- 'Protein'
cols[1] <- 'Protein'
Tresults <- Tresults[c(-1,-2),]
index1 <- grep("1", cols)
ind1 <- length(index1)
index2 <- grep("2", cols)
ind2 <- length(index2)
if(ind1 < ind2){
index <- ind2
} else {
index <- ind1
}
s <- LETTERS[seq(1,index)]
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[1,j1] <- paste(cols[1,j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[1,j2] <- paste(cols[1,j2], s[i2], sep = '')
}
for (i1 in 1:ind1) {
j1 <- index1[i1]
cols[j1] <- paste(cols[j1], s[i1], sep = '')
}
for (i2 in 1:ind2) {
j2 <- index2[i2]
cols[j2] <- paste(cols[j2], s[i2], sep = '')
}
# Column names
colnames(Tresults) <- cols
## calculate adj p values
Tresults <- Tresults[order(Tresults$pVal), ]
Tresults$pVal
class(Tresults)
Tresults <- as.data.frame(Tresults)
## calculate adj p values
Tresults <- Tresults[order(Tresults$pVal), ]
Tresults$BHpVal <- p.adjust(Tresults$pVal, method = "BH", n = length(Tresults$pVal))
length(Tresults$pVal)
?p.adjust()
Tresults <- as.data.frame(Tresults)
## calculate adj p values
Tresults <- Tresults[order(Tresults$pVal), ]
Tresults$BHpVal <- p.adjust(as.numeric(Tresults$pVal), method = "BH", n = length(Tresults$pVal))
Tresults$BHpVal <- p.adjust(as.numeric(Tresults$pVal), method = "BY", n = length(Tresults$pVal))
View(Tresults)
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header = FALSE)
Tresults <- Tresults[,-1]
cols <- as.vector(Tresults[2,])
cols[1] <- 'Protein'
Tresults <- Tresults[c(-1,-2),]
P <- ncols(Tresults)
p <- ncol(Tresults)
class()
Trewsults[,p]
Tresults[,p]
## calculate adj p values
Tresults <- Tresults[order(Tresults[,p]), ]
Tresults$BHpVal <- p.adjust(as.numeric(Tresults[,p]), method = "BH", n = length(Tresults[,p]))
## calculate adj p values
Tresults <- as.data.frame(Tresults[order(Tresults[,p]), ])
Tresults$BHpVal <- p.adjust(as.numeric(Tresults[,p]), method = "BH", n = length(Tresults[,p]))
# Reads in file and removes top 2 lines
Tresults <- read.csv(fileIn, header =TRUE)
Tresults <- Tresults[,-1]
cols <- as.vector(Tresults[1,])
View(cols)
cols[1] <- 'Protein'
Tresults <- Tresults[-1,]
p <- ncol(Tresults)
## calculate adj p values
Tresults <- as.data.frame(Tresults[order(Tresults[,p]), ])
Tresults$BHpVal <- p.adjust(as.numeric(Tresults[,p]), method = "BH", n = length(Tresults[,p]))
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/PathwayAnalysis/results')
results <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c('DE', 'Normalisation',"Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(results) <- headers
norms <- c("Loess-G","RLR-G","VSN-G","TI-G","MedI-G","AI-G","Quantile")
subsets <- list.files(pattern = norm, full.names = FALSE)
data <- tryCatch(read.csv(file = paste("PAout_", norm, sep = "")), error = function(e) NULL)
data <- tryCatch(read.csv(file = paste("PAout_", norm, ".csv", sep = "")), error = function(e) NULL)
View(data)
data <- data[, c(2:9)]
results <- rbind(results, data)
View(results)
results <- data.frame(matrix(ncol = 9, nrow = 0))
headers <- c('DE', 'Normalisation',"Threshold", "Go_BP", "Go_MF", "Go_CC",
"Total", 'DEs')
colnames(results) <- headers
norms <- c("Loess-G","RLR-G","VSN-G","TI-G","MedI-G","AI-G","Quantile")
for (norm in norms) {
#subsets <- list.files(pattern = norm, full.names = FALSE)
#subsets <- list.files(pattern = 'PAout', full.names = FALSE)
#for (subset in subsets) {
data <- tryCatch(read.csv(file = paste("PAout_", norm, ".csv", sep = "")), error = function(e) NULL)
data <- data[, c(2:9)]
results <- rbind(results, data)
#}
#best <- results[1,]
#
#bestResults <- rbind(bestResults, best)
}
View(results)
results <- results[order(-results$Total), ]
write.csv(results, 'ResultsSummary.csv')
setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTmodel/test')
#setwd('E:/OneDrive/PhD/Project/Thesis/4_Pipeline/Pipeline/Server/QPROTmodel/test')
jobdir <- paste(dataset, "_subs", sep = "")
if(file.exists(jobdir)) {
unlink(paste(jobdir, "/*"))
}else{
dir.create(jobdir)}
if(file.exists(jobdir)) {
unlink(paste(jobdir, "/*"))
}else{
dir.create(jobdir)}
if(file.exists(jobdir)) {
unlink(paste(jobdir, "/*", sep = ""))
}else{
dir.create(jobdir)}
